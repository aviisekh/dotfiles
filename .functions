# Clean Debian packages
apt-clean() {

    sudo apt-get clean
    sudo apt-get autoclean
    sudo apt-get autoremove
}

# Create a new directory and enter it
mkd() {
    mkdir -p "$@" && cd "$@"
}

# Print README file
readme() {
    for readme in {readme,README}.{md,MD,markdown,txt,TXT,mkd}; do
        if [[ -f "$readme" ]]; then
            cat "$readme"
        fi
    done
}

# Weather
weather() {
    curl -s "https://wttr.in/${1:-Ponorogo}?m2" | sed -n "1,27p"
}

# Direct redirection
goto() {
    if [[ $1 == "fleetpanda" ]]; then
        cd ~/Documents/workspace/fleetpanda/main
    fi		
}

# Git commit browser
fshow() {
    local commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
    git log --color=always \
        --format="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" "$@" | \
    fzf --no-sort --tiebreak=index --no-multi --reverse --ansi \
        --header="enter to view, alt-y to copy hash" --preview="$view_commit" \
        --bind="enter:execute:$view_commit | less -R" \
        --bind="alt-y:execute:$commit_hash | xclip -selection clipboard"
}

# Remove all commit in Git
#git-remove-all-commit() {
#    local branch
#    branch=$(git symbolic-ref --short HEAD)
#    echo -e "\nDo you want to remove all your commit in \033[1m$branch\033[0m branch? [Y/n] "
#    read -r response
#    case "$response" in
#        [yY][eE][sS]|[yY])
#            git checkout --orphan latest_branch
#            git add -A
#            git commit -am "Initial commit"
#            git branch -D "$branch"
#            git branch -m "$branch"
#            echo -e "\nTo force update your repository, run this command:\n\n    git push -fu origin $branch"
#            ;;
#        *)
#            echo "Cancelled."
#            ;;
#    esac
#}
clickup(){ 
  local git_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
  if [ "$(uname -s)" = "Darwin" ]; then
    open "https://app.clickup.com/t/${1:-$git_branch}"
  else
    xdg-open "https://app.clickup.com/t/${1:-$git_branch}"
  fi
}


jira(){ 
  local git_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
  if [ "$(uname -s)" = "Darwin" ]; then
    open "https://charger1.atlassian.net/jira/software/c/projects/CHAR/boards/2?modal=detail&selectedIssue=${1:-$git_branch}"
  else
    xdg-open "https://charger1.atlassian.net/jira/software/c/projects/CHAR/boards/2?modal=detail&selectedIssue=${1:-$git_branch}"
  fi
}

pipeline(){ 
  local git_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
  if [ "$(uname -s)" = "Darwin" ]; then
    open "https://dashboard.heroku.com/pipelines/29dc61d7-2163-434b-94a4-edd61799b9e1"
  else
    xdg-open "https://dashboard.heroku.com/pipelines/29dc61d7-2163-434b-94a4-edd61799b9e1"
  fi
}

lambda(){ 
  local git_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
  if [ "$(uname -s)" = "Darwin" ]; then
    open "https://us-west-2.console.aws.amazon.com/lambda/home?region=us-west-2#/functions"
  else
    xdg-open "https://us-west-2.console.aws.amazon.com/lambda/home?region=us-west-2#/functions"
  fi
}


sqs(){ 
  local git_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
  if [ "$(uname -s)" = "Darwin" ]; then
    open "https://us-west-2.console.aws.amazon.com/sqs/v2/home?region=us-west-2"
  else
    xdg-open "https://us-west-2.console.aws.amazon.com/sqs/v2/home?region=us-west-2"
  fi
}


fleetpanda(){
  if [[ $# -eq 0 ]]; then 
    goto fleetpanda	
  elif [[ $1 == 'session' ]]; then
    local session="fleetpanda"
    if [[ -z "$TMUX" ]]; then
      tmux has-session -t $session 2>/dev/null
      if [ $? != 0 ]; then
        tmux new -d -s $session -n main 
        tmux send-keys -t $session:main "goto fleetpanda" Enter
        tmux send-keys -t $session:main "bundle exec rails s" Enter
        tmux attach -t $session:main
      else
        tmux attach-session -t $session
      fi
    fi
  elif [[ $1 == 'deploy' ]]; then 
   if [[ $3 == "-f" ]]; then
    (git push fleetpanda-$2 $2:master -f)     
   else
    (git push fleetpanda-$2 $2:master)
   fi 
  fi
}

# Example function
#outerfunc1() {
# innerfunc() { echo "Running inner function #1"; }
# echo "Running outer function #1"
# }
# outerfunc2() {
# innerfunc() { echo "Running inner function #2"; }
# echo "Running outer function #2"
# } 
 
# test()(
#   if [[ $1 == "abhishek" ]]; then
#    (goto fleetpanda; ls)
#   elif [[ $1 == "bhatta" ]]; then
#     echo "Bhhatta"
#   fi
# )
function cd() {
  builtin cd "$@"

  if [[ -z "$VIRTUAL_ENV" ]] ; then
    ## If env folder is found then activate the vitualenv
      if [[ -d ./.venv ]] ; then
        source ./.venv/bin/activate
      fi
  else
    ## check the current folder belong to earlier VIRTUAL_ENV folder
    # if yes then do nothing
    # else deactivate
      parentdir="$(dirname "$VIRTUAL_ENV")"
      if [[ "$PWD"/ != "$parentdir"/* ]] ; then
        deactivate
      fi
  fi
}
